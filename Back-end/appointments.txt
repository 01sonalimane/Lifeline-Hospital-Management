### **Steps to Implement an Appointment Page with Doctor Availability**  
We need to:  
✅ Allow patients to book appointments with a **doctor**.  
✅ Ensure **no overlapping time slots** for a doctor.  
✅ Store **patient details**, **doctor details**, and **selected time slots**.  
✅ Check **doctor's availability** before confirming the appointment.  

---

## **📌 Schema for Appointments**
We will create an **`appointment`** schema to store booked appointments.

```javascript
const mongoose = require("mongoose");

let appointmentSchema = new mongoose.Schema({
    "_id": String,  // UUID for unique appointment ID
    "patient_id": { type: String, required: true, ref: "patient" },
    "patient_name": { type: String, required: true },
    "doctor_name": { type: String, required: true },
    "time_slot": { type: String, required: true }, // e.g., "10:00 AM - 10:30 AM"
    "date": { type: String, required: true }  // e.g., "2025-02-07"
});

const appointment_model = mongoose.model("appointment", appointmentSchema);

module.exports = { appointment_model };
```

---

## **📌 Appointment Booking Controller**
This controller:  
1. **Checks if the time slot is available** for the doctor.  
2. **If available**, books the appointment.  
3. **If not**, returns an error.

```javascript
const { v4 } = require("uuid");
const { appointment_model } = require("../model/model");

let book_appointment = async (req, res) => {
    try {
        const { patient_id, patient_name, doctor_name, time_slot, date } = req.body;

        // Check for missing fields
        if (!patient_id || !patient_name || !doctor_name || !time_slot || !date) {
            return res.json({ "msg": "All fields are required!" });
        }

        // Check if the doctor is available in the selected time slot
        let existingAppointment = await appointment_model.findOne({
            doctor_name,
            time_slot,
            date
        });

        if (existingAppointment) {
            return res.json({ "msg": "Time slot already booked! Choose another slot." });
        }

        // Book appointment
        let newAppointment = new appointment_model({
            _id: v4(),
            patient_id,
            patient_name,
            doctor_name,
            time_slot,
            date
        });

        await newAppointment.save();
        res.json({ "msg": "Appointment booked successfully!" });
    } catch (err) {
        console.error("Error in booking appointment:", err);
        res.json({ "msg": "Error in booking appointment!" });
    }
};

module.exports = { book_appointment };
```

---

## **📌 Fetch Doctor's Available Slots**
This function returns **available time slots** for a doctor on a given day.

```javascript
let get_available_slots = async (req, res) => {
    try {
        const { doctor_name, date } = req.query;

        // Define possible time slots
        let allSlots = [
            "9:00 AM - 9:30 AM", "9:30 AM - 10:00 AM", 
            "10:00 AM - 10:30 AM", "10:30 AM - 11:00 AM",
            "11:00 AM - 11:30 AM", "11:30 AM - 12:00 PM",
            "2:00 PM - 2:30 PM", "2:30 PM - 3:00 PM"
        ];

        // Get booked slots for the doctor
        let bookedAppointments = await appointment_model.find({ doctor_name, date });
        let bookedSlots = bookedAppointments.map(a => a.time_slot);

        // Filter available slots
        let availableSlots = allSlots.filter(slot => !bookedSlots.includes(slot));

        res.json({ "available_slots": availableSlots });
    } catch (err) {
        console.error("Error in fetching available slots:", err);
        res.json({ "msg": "Error in fetching available slots" });
    }
};

module.exports = { book_appointment, get_available_slots };
```

---

## **📌 API Endpoints**
### **1️⃣ Book an Appointment**
- **Endpoint:** `POST /book_appointment`
- **Body:**
```json
{
    "patient_id": "PAT001",
    "patient_name": "Amit Sharma",
    "doctor_name": "Dr. Rajesh Kumar",
    "time_slot": "10:00 AM - 10:30 AM",
    "date": "2025-02-07"
}
```
- **Response:**  
✅ `{ "msg": "Appointment booked successfully!" }`  
❌ `{ "msg": "Time slot already booked! Choose another slot." }`

---

### **2️⃣ Get Available Slots**
- **Endpoint:** `GET /available_slots?doctor_name=Dr.%20Rajesh%20Kumar&date=2025-02-07`
- **Response:**
```json
{
    "available_slots": [
        "9:00 AM - 9:30 AM",
        "9:30 AM - 10:00 AM",
        "11:00 AM - 11:30 AM",
        "2:00 PM - 2:30 PM"
    ]
}
```

---

### **✅ Final Features**
✔️ **No overlapping appointments**  
✔️ **Shows available time slots**  
✔️ **Prevents duplicate bookings**  
✔️ **Simple & efficient**  

Would you like any additional features, such as canceling an appointment? 🚀